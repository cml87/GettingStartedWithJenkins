pipeline {
    agent any

    // we can put tools inside a stage, ie. stage level, before the steps{} block
    tools {
        // Install this Maven version already configured
        maven "maven_3_6_3"
        jdk "openjdk11"
    }

    stages {
        
        stage ('Build/System Info') {
            steps {
                sh ""
                sh '''
                    env | grep -e PATH -e JAVA_HOME
                    which java
                    java -version
                '''
                sh '''
                    mvn -version                
                '''
                sh "ls -larth /opt/gitversion"
                
                sh ""
            }
        }

        stage ('Checkout') {
            steps {
                //git branch: 'master', credentialsId: 'jenkins-laptop', url: 'git@github.com:cml87/SpringCore_1_forJenkins.git'
                git branch: 'develop', credentialsId: 'jenkins-laptop', url: 'git@github.com:cml87/SpringCore_1_forJenkins.git'

            }
        }
        
        stage ('Checked out info') {
            steps {
                sh "git branch -avv"
                sh "ls -larth"
            }
        }

        stage ('Get Full Semantic Version') {
            steps {
                //sh "gitversion -config /opt/gitversion/GitVersion.yml"
                sh "gitversion -config /opt/gitversion/GitVersion.yml -output buildserver"
                
                script {
                    def props = readProperties file: 'gitversion.properties'

                    env.GitVersion_SemVer = props.GitVersion_SemVer
                    env.GitVersion_BranchName = props.GitVersion_BranchName
                    env.GitVersion_AssemblySemVer = props.GitVersion_AssemblySemVer
                    env.GitVersion_MajorMinorPatch = props.GitVersion_MajorMinorPatch
                    env.GitVersion_Sha = props.GitVersion_Sha
                }

                echo env.GitVersion_FullSemVer 

            }


        }



        stage('Test') {
            steps {
               // sh "mvn spring-javaformat:apply"
                sh "mvn test -Dversion=${env.GitVersion_FullSemVer}"
            }

            // post {
            //     // If Maven was able to run the tests, even if some of the test
            //     // failed, record the test results and archive the jar file.
            //     success {
            //         junit '**/target/surefire-reports/TEST-*.xml'
            //         archiveArtifacts 'target/*.jar'
            //     }
            // }
        }
        
        stage ('Package') {
            steps {
                sh "mvn clean package -Dversion=${env.GitVersion_FullSemVer}"
            }
        }
    }
}
