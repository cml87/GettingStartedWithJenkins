pipeline {
    agent any

    // we can put tools inside a stage, ie. stage level, before the steps{} block
    tools {
        // Install this Maven version already configured
        maven "maven_3_6_3"
        jdk "openjdk11"
    }

    stages {
        
        stage ("Clean WS") {
            steps {
                cleanWs()
            }
        }

        stage ('Build/System Info') {
            steps {
                sh ""
                sh '''
                    env | grep -e PATH -e JAVA_HOME
                    which java
                    java -version
                '''
                sh '''
                    mvn -version                
                '''
                sh "ls -larth /opt/gitversion"
                
                sh ""
            }
        }

        stage ('Checkout') {
            steps {
                //git branch: 'master', credentialsId: 'jenkins-laptop', url: 'git@github.com:cml87/SpringCore_1_forJenkins.git'
                //git branch: 'develop', credentialsId: 'jenkins-laptop', url: 'git@github.com:cml87/SpringCore_1_forJenkins.git'

                checkout([$class: 'GitSCM', 
                    branches: [[name: '**']],  //'*/master'   -> fix to include only the branches of gitflow
                    extensions: [
                        [$class: 'CloneOption', 
                            honorRefspec: true, 
                            noTags: false, 
                            reference: '', 
                            shallow: false], 
                        [$class: 'PruneStaleBranch']
                    ], 
                    userRemoteConfigs: [[credentialsId: 'jenkins-laptop', 
                                        refspec: '+refs/heads/*:refs/remotes/origin/*',   // the remote will be named origin
                                        url: 'git@github.com:cml87/SpringCore_1_forJenkins.git']]
                ])
            }
        }
        
        stage ('Checked out info') {
            steps {
                sh "ls -larth"
                sh "git branch -avv"
                sh "git tag -l"
                sh 'git show-ref --tag'
            }
        }

        stage ('Get Full Semantic Version') {
            steps {
                //sh "gitversion -config /opt/gitversion/GitVersion.yml"
                
                sh "git checkout develop"  // this should be the branch whose push event in the remote has triggered the build
                
                sh "gitversion -config /opt/gitversion/GitVersion.yml -output buildserver"
                
                script {
                    def props = readProperties file: 'gitversion.properties'

                    env.GitVersion_FullSemVer = props.GitVersion_FullSemVer
                    env.GitVersion_BranchName = props.GitVersion_BranchName
                    env.GitVersion_MajorMinorPatch = props.GitVersion_MajorMinorPatch
                    env.GitVersion_Sha = props.GitVersion_Sha
                }

                echo "FullSemVer: " + env.GitVersion_FullSemVer 
                

            }


        }



        stage('Test') {
            steps {
               // sh "mvn spring-javaformat:apply"
                sh "mvn test -Dversion=${env.GitVersion_FullSemVer}"
            }

            // post {
            //     // If Maven was able to run the tests, even if some of the test
            //     // failed, record the test results and archive the jar file.
            //     success {
            //         junit '**/target/surefire-reports/TEST-*.xml'
            //         archiveArtifacts 'target/*.jar'
            //     }
            // }
        }
        
        stage ('Package') {
            steps {
                sh "mvn clean package -Dversion=${env.GitVersion_FullSemVer}"
            }
        }
    }
}
